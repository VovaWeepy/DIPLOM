Для запуска используйте файл app3.py 
Данный файл обращается к 4 html файлам (chat_frame - окно чата и его дизайн;
login - страница со входом в панель управления;
register - страница с регистрацией пользователя;
dashboard - страница панели управления)

Также в папке templates есть файл test_site данный файл предназначен для проверки работы панели управления 
К нему прилагается test_products.xml







Чат-бот интернет-магазина (Локальная версия)
Вторая версия находится в папке  Version2
Описание проекта
Это веб-приложение на основе Flask, предоставляющее чат-бота для консультирования пользователей по товарам интернет-магазина. Бот использует API GigaChat для обработки запросов пользователей и предоставления рекомендаций на основе данных о товарах, загружаемых из локального XML-файла (products.xml). Приложение включает веб-интерфейс, где пользователи могут взаимодействовать с ботом, задавая вопросы о товарах.
Основные функции

Загрузка данных о товарах: Приложение загружает данные о товарах из локального файла products.xml.
Интеграция с GigaChat API: Бот использует API GigaChat для обработки запросов и генерации ответов.
Фильтрация товаров по категориям: Бот определяет категорию товаров из сообщений пользователя и предлагает рекомендации, основанные на соответствующих товарах.
Веб-интерфейс: Простой интерфейс, созданный с использованием HTML и JavaScript, позволяет пользователям взаимодействовать с ботом.
История сообщений: Поддерживается контекст диалога, сохраняя историю сообщений для более точных ответов.
Фильтрация по цене: Бот может предлагать товары в указанной категории до определённой суммы или за точную сумму, указанную пользователем.

Структура проекта
project_root/
├── app.py                # Основной файл приложения Flask
├── templates/
│   ├── index.html       # Шаблон главной страницы (список товаров)
│   └── category.html    # Шаблон страницы категории
├── products.xml         # Локальный XML-файл с данными о товарах
└── README.md            # Документация проекта

Требования

Python 3.8+
Flask
requests
Браузер с поддержкой JavaScript для веб-интерфейса
Локальный файл products.xml с данными о товарах

Установка

Клонируйте репозиторий (если применимо):
git clone <URL_репозитория>
cd <имя_папки_проекта>


Создайте виртуальное окружение:
python -m venv .venv
.venv\Scripts\activate  # Для Windows


Установите зависимости:
pip install flask requests


Создайте файл products.xml:Поместите файл products.xml в корень проекта. Пример структуры файла:
<products>
    <product>
        <id>1</id>
        <name>Название товара</name>
        <category>Смартфоны</category>
        <price>1000.00</price>
        <description>Описание товара</description>
    </product>
    <!-- Другие товары -->
</products>


Создайте папку templates:Создайте папку templates в корне проекта и добавьте файлы index.html и category.html. Минимальный пример для index.html:
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Магазин</title>
</head>
<body>
    <h1>Товары</h1>
    <ul>
    {% for product in products %}
        <li>{{ product.name }} ({{ product.category }}) - {{ product.price }} руб.</li>
    {% endfor %}
    </ul>
</body>
</html>

И для category.html:
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{{ category }}</title>
</head>
<body>
    <h1>Товары в категории: {{ category }}</h1>
    <ul>
    {% for product in products %}
        <li>{{ product.name }} - {{ product.price }} руб.</li>
    {% endfor %}
    </ul>
</body>
</html>


Запустите приложение:
python app.py

Приложение будет доступно по адресу http://127.0.0.1:5000.


Использование

Откройте браузер и перейдите по адресу http://127.0.0.1:5000 для просмотра списка товаров.
Перейдите на /category/<category> (например, /category/Смартфоны) для просмотра товаров в конкретной категории.
Отправляйте POST-запросы на /chat для взаимодействия с ботом. Например, с помощью инструмента вроде Postman или через форму в интерфейсе (если добавлена). Пример запроса:curl -X POST http://127.0.0.1:5000/chat -d "message=Порекомендуй смартфон до 20000 руб."


Бот ответит, основываясь на данных из products.xml. Например, вы можете спросить:
"Какой смартфон порекомендуете?"
"Покажи ноутбуки за 50000 руб."
"Что есть в категории телевизоры?"



Формат XML-файла
XML-файл (products.xml) должен иметь следующую структуру:
<products>
    <product>
        <id>1</id>
        <name>Название товара</name>
        <category>Смартфоны</category>
        <price>1000.00</price>
        <description>Описание товара</description>
    </product>
    <!-- Другие товары -->
</products>

Убедитесь, что файл products.xml находится в корне проекта и имеет корректный формат.
Замечания по развертыванию

Локальная версия: Приложение предназначено для локального использования, так как данные о товарах загружаются из локального файла products.xml.
Безопасность: В текущей версии для запросов к GigaChat API используется verify=False, что небезопасно для продакшена. В продакшене настройте проверку SSL-сертификатов.
GigaChat API: Убедитесь, что у вас есть действующие учетные данные (GIGACHAT_CLIENT_ID и GIGACHAT_CLIENT_SECRET) для доступа к API GigaChat. Храните их в безопасном месте (например, в переменных окружения).
Шаблоны: Код ссылается на index.html и category.html. Если их нет, создайте их (примеры выше) или удалите соответствующие маршруты (/ и /category/<category>).

Ограничения

Приложение требует наличия файла products.xml в корне проекта. Если файл отсутствует или некорректен, бот будет работать с пустым каталогом товаров.
Категории товаров заданы в коде (Смартфоны, Ноутбуки, Телевизоры, Наушники, Планшеты). Для динамического извлечения категорий из XML требуется доработка (см. предыдущие версии кода).
Маршрут /chat ожидает POST-запросы. Без пользовательского интерфейса для чата (например, chat.html из других версий) взаимодействие возможно только через API-запросы.
Веб-интерфейс минималистичен. Для полноценного чата рекомендуется добавить шаблон chat.html (см. предыдущие версии).

