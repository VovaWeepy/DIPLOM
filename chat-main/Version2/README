Чат-бот интернет-магазина (Version2)
Описание проекта
Это веб-приложение на основе Flask, которое предоставляет чат-бота для консультирования пользователей по товарам интернет-магазина. Бот использует API GigaChat для обработки запросов пользователей и предоставления рекомендаций на основе данных о товарах, загружаемых из XML-файла по URL. Приложение включает веб-интерфейс чата, где пользователи могут взаимодействовать с ботом, задавая вопросы о товарах. Все файлы приложения находятся в папке Version2.
Основные функции

Загрузка данных о товарах: Приложение загружает данные о товарах из XML-файла, доступного по указанному URL.
Динамическое получение категорий: Категории товаров извлекаются из XML-файла, а не задаются в коде.
Интеграция с GigaChat API: Бот использует API GigaChat для обработки запросов пользователей и генерации ответов.
Фильтрация товаров по категориям: Бот определяет категорию товаров из сообщений пользователя и предоставляет рекомендации, основанные на соответствующих товарах.
Веб-интерфейс чата: Простой и удобный интерфейс, созданный с использованием HTML, JavaScript и Tailwind CSS, позволяет пользователям взаимодействовать с ботом.
История сообщений: Поддерживается контекст диалога, сохраняя историю сообщений для более точных ответов.

Структура проекта
Version2/
├── app2.py                # Основной файл приложения Flask
├── templates/
│   └── chat.html         # Шаблон веб-интерфейса чата
└── README.md             # Документация проекта

Требования

Python 3.8+
Flask
requests
Браузер с поддержкой JavaScript для веб-интерфейса

Установка

Клонируйте репозиторий (если применимо):
git clone <URL_репозитория>
cd <имя_папки_проекта>/Version2


Создайте виртуальное окружение:
python -m venv .venv
.venv\Scripts\activate  # Для Windows


Установите зависимости:
pip install flask requests


Настройте URL для XML-файла: В файле app.py замените значение переменной PRODUCTS_XML_URL на реальный URL, где доступен XML-файл с данными о товарах:
PRODUCTS_XML_URL = "https://example.com/products.xml"


Проверьте наличие шаблона: Убедитесь, что файл chat.html находится в папке Version2/templates.

Запустите приложение:
python app.py

Приложение будет доступно по адресу http://127.0.0.1:5000.


Использование

Откройте браузер и перейдите по адресу http://127.0.0.1:5000 (или другой URL, если приложение развернуто на сервере).
Введите вопрос о товарах в текстовое поле чата и нажмите "Отправить".
Бот ответит, основываясь на данных из XML-файла и контексте диалога. Например, вы можете спросить: "Какой смартфон порекомендуете?" или "Сколько стоит ноутбук?".
Чат поддерживает историю сообщений, поэтому бот учитывает предыдущие вопросы для более точных ответов.

Формат XML-файла
XML-файл с данными о товарах должен иметь следующую структуру:
<products>
    <product>
        <id>1</id>
        <name>Название товара</name>
        <category>Смартфоны</category>
        <price>1000.00</price>
        <description>Описание товара</description>
    </product>
    <!-- Другие товары -->
</products>

Убедитесь, что XML-файл доступен по указанному URL и имеет корректный формат.
Замечания по развертыванию

Безопасность: В текущей версии для запросов к GigaChat API используется verify=False, что небезопасно для продакшена. В продакшене настройте правильную проверку SSL-сертификатов.
Развертывание: Для развертывания на сервере используйте платформы, такие как Heroku, Render или VPS. Настройте сервер для поддержки HTTPS.
GigaChat API: Убедитесь, что у вас есть действующие учетные данные (GIGACHAT_CLIENT_ID и GIGACHAT_CLIENT_SECRET) для доступа к API GigaChat. Храните их в безопасном месте (например, в переменных окружения).

Ограничения

Приложение предполагает, что XML-файл доступен по указанному URL. Если URL недоступен или XML некорректен, бот будет работать с пустым каталогом товаров.
Категории загружаются из XML при каждом запросе, что может быть неэффективно для больших каталогов. Для оптимизации можно добавить кэширование.
Веб-интерфейс чата минималистичен. Для улучшения можно добавить дополнительные функции, такие как очистка истории чата или поддержка мультимедиа.
Маршрут /category/<category> требует наличия шаблона category.html. Если он отсутствует, удалите этот маршрут или создайте соответствующий шаблон.
